Указатели на элемент:
driver.find_element_by_id("searchInput")
driver.find_element_by_name("UID")
driver.find_element_by_xpath("//span[text()='Рабочее пространство']")
driver.find_element_by_link_text("Новости")
driver.find_element_by_partial_link_text()
driver.find_element_by_tag_name()
driver.find_element_by_class_name()
driver.find_element_by_css_selector("div.app-wrapper:nth-child(1)")

Указатели на элементы:
driver.find_elements_by_name()
driver.find_elements_by_xpath()
driver.find_elements_by_link_text()
driver.find_elements_by_partial_link_text()
driver.find_elements_by_tag_name()
driver.find_elements_by_class_name()
driver.find_elements_by_css_selector()

Ожидание:
time.sleep(60)

Клик:
.click()

Вставить в поле:
указатель на элемнет.send_keys("Tom2bread")

Выход:
driver.quit()

Открывает окно браузера на полную:
driver.maximize_window()

Обновить страницу:
driver.refresh()

Считать поле:
переменная питона= driver.селектор.text
    Пример:Считать названия первого дела
    one=driver.find_element_by_xpath("//div[contains(@class,'priorityFaset')]//div[1]//div[2]//div[2]//div[1]//div[1]//div[2]//span[2]").text

Очистка поля:
.clear()

Считать текстовое значение (возвращает str):
.text()

________________________________________________________________________________
Важным рахличием между CSS и XPath локаторами является то, что, используя XPath,
мы можем производить перемещение как в глубину DOM иерархии, так и возращаться
назад. Что же касается CSS, то тут мы можем двигаться только в глубину. Это значит,
что с XPath можем найти родительский элемент, по дочернему.


Правила написания xpath:
xpath бывает 2х видов absolute и relative.
1)
    .//*[@class="BlockTitle-first"]

    .// - указывает на спуск на 0 и более уровней

    * - любой элементы. Вообще тут прописываются теги: div, a, h, span и т.д.
2)
    //section[1]//div[2]//div[3]//article[1]//div[2]//div[1]//div[2]//h2[1]//a[1]

    1.начинается отсчет внутри с 1цы
    2.//нельзя оставлять в конце xpath
________________________________________________________________________________
Правила написания css:

1)
    div.App-root div.App-container div.App-header header.Header-root div.Header-nav nav.Header-menu span.Header-item.Header-isItemActive:nth-child(1) > a.Link-root

    1.в качестве разделителя пробел
    2.пробелы в конце допустимы

________________________________________________________________________________
Ожидания:

1.Явные

Более предпочтительно использовать WebDriverWait и ExpectedCondition:

WebDriver driver = new FirefoxDriver();
driver.get("http://some_url");
WebElement dynamicElement = (new WebDriverWait(driver, 10)).until(ExpectedConditions.presenceOfElementLocated(By.id("dynamicElement_id")));

В данном случае скрипт будет ждать элемента c id = dynamicElement_id в течении
10 секунд, но продолжит выполнение, как только элемент будет найден. При этом
WebDriverWait класс выступает в роли конфигурации ожидания - задаем, как долго
ждать события и как часто проверять его наступление. ExpectedConditions -
статический класс, содержащий часто используемые условия для ожидания.

*ждет в течение заданного времени, по истечениею выполняет следующее действие
**можно поставить условие


2.Не явные

Неявные ожидания - Implicit Waits - конфигурируют экземпляр WebDriver делать
многократные попытки найти элемент (элементы) на странице в течении
заданного периода времени, если элемент не найден сразу. Tолько по истечении
этого времени WebDriver бросит ElementNotFoundException.

WebDriver driver = new FirefoxDriver();
driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
driver.get("http://some_url");
WebElement dynamicElement = driver.findElement(By.id("dynamicElement_id"));


*пытается до получения удачного результат в течение заданного времени

























